// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  email         String  @unique
  emailVerified Boolean @default(false)
  displayname   String?
  username      String  @unique
  avatar        String?
  hexColor      String
  banner        String?
  bannerColor   String
  bio           String?
  password      String

  pathAvatar String?
  pathBanner String?

  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?

  verifyToken       String   @unique
  verifyTokenExpiry DateTime @default(now())

  friendIDs     String[] @db.ObjectId
  friends       User[]   @relation("UserFriends", fields: [friendIDs], references: [id])
  userFriendIDs String[] @db.ObjectId
  userFriends   User[]   @relation("UserFriends", fields: [userFriendIDs], references: [id])

  userRequestId     FriendRequest[]
  friendsRequestIDs String[]        @db.ObjectId
  friendsRequest    FriendRequest[] @relation("friendRequestTo", fields: [friendsRequestIDs], references: [userRequestId])

  directMessages DirectMessage[]

  seenMessageIds String[]        @db.ObjectId
  seenMessages   DirectMessage[] @relation("Seen", fields: [seenMessageIds], references: [id])

  conversationsInitiated Conversation[] @relation("UserOne")
  conversationsReceived  Conversation[] @relation("UserTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  userRequestId String @map("_id") @db.ObjectId
  userRequest   User   @relation(fields: [userRequestId], references: [id], onDelete: Cascade)

  userRequestToIDs String[] @db.ObjectId
  userRequestTo    User[]   @relation("friendRequestTo", fields: [userRequestToIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userRequestId])
}

model EmailVerifyCode {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  verifyCode String @unique
  userId     String @unique
  userEmail  String @unique

  createdAt DateTime @default(now())
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userOneId               String  @db.ObjectId
  userOne                 User    @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userOneOpenConversation Boolean @default(true)

  userTwoId               String  @db.ObjectId
  userTwo                 User    @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  userTwoOpenConversation Boolean @default(false)

  directMessages DirectMessage[]

  lastMessageAt DateTime @default(now())

  @@unique([userOneId, userTwoId])
}

model DirectMessage {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String  @db.String
  fileUrl String? @db.String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
