// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  email         String  @unique
  emailVerified Boolean @default(false)
  displayname   String?
  username      String  @unique
  picture       String?
  password      String
  hexColor      String

  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?

  verifyToken       String   @unique
  verifyTokenExpiry DateTime @default(now())

  userFriendId   Friends[]
  userFriendsIDs String[]  @db.ObjectId
  userFriends    Friends[] @relation("userFriends", fields: [userFriendsIDs], references: [id])

  userRequestId     FriendRequest[]
  friendsRequestIDs String[]        @db.ObjectId
  friendsRequest    FriendRequest[] @relation("friendRequestTo", fields: [friendsRequestIDs], references: [userRequestId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  userRequestId String @map("_id") @db.ObjectId
  userRequest   User   @relation(fields: [userRequestId], references: [id], onDelete: Cascade)

  userRequestToIDs String[] @db.ObjectId
  userRequestTo    User[]   @relation("friendRequestTo", fields: [userRequestToIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userRequestId])
}

model Friends {
  id          String @map("_id") @db.ObjectId
  userProfile User   @relation(fields: [id], references: [id], onDelete: Cascade)

  userFriendsIDs String[] @db.ObjectId
  userFriends    User[]   @relation("userFriends", fields: [userFriendsIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id])
}
